//go:build ignore
// +build ignore

package main

// generates tls.go
// https://statics.tls.security.mozilla.org/server-side-tls-conf.json

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

type MozillaTLS struct {
	Href           string `json:"href"`
	Configurations struct {
		Modern struct {
			OpensslCiphers             []any    `json:"openssl_ciphers"`
			OpensslCiphersuites        []string `json:"openssl_ciphersuites"`
			TLSVersions                []string `json:"tls_versions"`
			TLSCurves                  []string `json:"tls_curves"`
			CertificateTypes           []string `json:"certificate_types"`
			CertificateCurves          []string `json:"certificate_curves"`
			CertificateSignatures      []string `json:"certificate_signatures"`
			RsaKeySize                 int      `json:"rsa_key_size"`
			DhParamSize                any      `json:"dh_param_size"`
			EcdhParamSize              int      `json:"ecdh_param_size"`
			HstsMinAge                 int      `json:"hsts_min_age"`
			OldestClients              []string `json:"oldest_clients"`
			OcspStaple                 bool     `json:"ocsp_staple"`
			ServerPreferredOrder       bool     `json:"server_preferred_order"`
			MaximumCertificateLifespan int      `json:"maximum_certificate_lifespan"`
		} `json:"modern"`
		Intermediate struct {
			OpensslCiphers             []string `json:"openssl_ciphers"`
			OpensslCiphersuites        []string `json:"openssl_ciphersuites"`
			TLSVersions                []string `json:"tls_versions"`
			TLSCurves                  []string `json:"tls_curves"`
			CertificateTypes           []string `json:"certificate_types"`
			CertificateCurves          any      `json:"certificate_curves"`
			CertificateSignatures      []string `json:"certificate_signatures"`
			RsaKeySize                 int      `json:"rsa_key_size"`
			DhParamSize                int      `json:"dh_param_size"`
			EcdhParamSize              int      `json:"ecdh_param_size"`
			HstsMinAge                 int      `json:"hsts_min_age"`
			OldestClients              []string `json:"oldest_clients"`
			OcspStaple                 bool     `json:"ocsp_staple"`
			ServerPreferredOrder       bool     `json:"server_preferred_order"`
			MaximumCertificateLifespan int      `json:"maximum_certificate_lifespan"`
		} `json:"intermediate"`
		Old struct {
			OpensslCiphers             []string `json:"openssl_ciphers"`
			OpensslCiphersuites        []string `json:"openssl_ciphersuites"`
			TLSVersions                []string `json:"tls_versions"`
			TLSCurves                  []string `json:"tls_curves"`
			CertificateTypes           []string `json:"certificate_types"`
			CertificateCurves          any      `json:"certificate_curves"`
			CertificateSignatures      []string `json:"certificate_signatures"`
			RsaKeySize                 int      `json:"rsa_key_size"`
			DhParamSize                int      `json:"dh_param_size"`
			EcdhParamSize              int      `json:"ecdh_param_size"`
			HstsMinAge                 int      `json:"hsts_min_age"`
			OldestClients              []string `json:"oldest_clients"`
			OcspStaple                 bool     `json:"ocsp_staple"`
			ServerPreferredOrder       bool     `json:"server_preferred_order"`
			MaximumCertificateLifespan int      `json:"maximum_certificate_lifespan"`
		} `json:"old"`
	} `json:"configurations"`
	Version float64 `json:"version"`
}

func main() {
	const url = "https://statics.tls.security.mozilla.org/server-side-tls-conf.json"
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	var data MozillaTLS
	err = json.Unmarshal(body, &data)
	if err != nil {
		log.Fatal(err)
	}
	//fmt.Printf("v: %v\n", data.Configurations.Modern.OpensslCiphersuites)
	//fmt.Printf("v: %v\n", data.Configurations.Modern.CertificateCurves)
	//fmt.Printf("v: %v\n", data.Configurations.Modern.CertificateSignatures)

	f, err := os.Create("tls.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp    time.Time
		URL          string
		CipherSuites []string
	}{
		Timestamp:    time.Now(),
		URL:          url,
		CipherSuites: data.Configurations.Modern.OpensslCiphersuites,
	})

}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// Generated at {{ .Timestamp }}
// using data from
// {{ .URL }}
package main

import (
	"crypto/tls"
)

var TLSConfig = &tls.Config{
	MinVersion:               tls.VersionTLS12,
	CurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},
	PreferServerCipherSuites: true,
	CipherSuites: []uint16{
{{- range .CipherSuites }}
		tls.{{ printf "%s" . }},
{{- end }}
	},
}
`))
